
#include "../lib/catch.hpp"

#include "board.h"

using namespace Morat;
using namespace Hex;

void test_game(Board b, std::vector<std::string> moves, Outcome outcome) {
	REQUIRE(b.num_moves() == 0);
	Side side = Side::P1;
	for(auto s : moves) {
		Outcome expected = (s == moves.back() ? outcome : Outcome::UNKNOWN);
		Move move(s);
		CAPTURE(move);
		CAPTURE(b);
		REQUIRE(b.valid_move(move));
		REQUIRE(b.toplay() == side);
		REQUIRE(b.test_outcome(move) == expected);
		REQUIRE(b.move(move));
		REQUIRE(b.won() == expected);
		side = ~side;
	}
}

TEST_CASE("Hex::Board", "[hex][board]") {
	Board b(7);

	SECTION("Basics") {
		REQUIRE(b.get_size() == 7);
		REQUIRE(b.movesremain() == 27);
	}

	SECTION("valid moves") {
		std::string valid[] = {"A1", "D4",
		"a1",       "a3",       "a5",       "a7",
		      "b2",       "b4",       "b6",       
		"c1",       "c3",       "c5",       "c7",     
		      "d2",       "d4",       "d6",      
		"e1",       "e3",       "e5",       "e7",
		      "f2",       "f4",       "f6",      
		"g1",       "g3",       "g5",       "g7",
		};
		for(auto m : valid){
			REQUIRE(b.onboard(m));
			REQUIRE(b.valid_move(m));
		}
	}

	SECTION("invalid moves") {
		std::string invalid[] = {"a0", "a8", "a10", "b8", "c8", "e0", "e8", "f8", "f0", "h1", "f0"};
		for(auto m : invalid){
			REQUIRE_FALSE(b.onboard(m));
			REQUIRE_FALSE(b.valid_move(m));
		}
	}
	
	SECTION("preplaced moves") {
		std::string vertices[] = {   "a2", "a4", "a6",
					 "b1", "b3", "b5", "b7",
					    "c2", "c4", "c6",
					 "d1", "d3", "d5", "d7",
					    "e2", "e4", "e6",
					 "f1", "f3", "f5", "f5",
					    "g2", "g4", "g6"	};
		for (auto m : vertices) {
			REQUIRE_FALSE(b.onboard(m));
			REQUIRE_FALSE(b.valid_move(m);
		}
	}

	SECTION("duplicate moves") {
		Move m("a1");
		REQUIRE(b.valid_move(m));
		REQUIRE(b.move(m));
		REQUIRE_FALSE(b.valid_move(m));
		REQUIRE_FALSE(b.move(m));
	}

	SECTION("Unknown_1") {
		test_game(b, {      "a1", "b2", "a3", "b4", "a5", "c1", "a7"}, Outcome::UNKNOWN);
		test_game(b, {"d4", "a1", "b2", "a3", "b4", "a5", "c1", "a7"}, Outcome::UNKNOWN);
	}

	SECTION("Unknown_2") {
		test_game(b, {      "b2", "c1", "b4", "c3", "d2", "c5", "d4", "c7", "f2", "e1", "a1"}, Outcome::UNKNOWN);
		test_game(b, {"d4", "b2", "c1", "b4", "c3", "b2", "c5", "d4", "c7", "f2", "e1", "a1"}, Outcome::UNKNOWN);
	}

	SECTION("Unknown_3") {
		test_game(b, {      "b2", "f2", "b4", "f4", "c1", "e1", "c3", "e3", "d2", "e5", "d4"}, Outcome::UNKNOWN);
		test_game(b, {"d7", "b2", "f2", "b4", "f4", "c1", "e1", "c3", "e3", "d2", "e5", "d4"}, Outcome::UNKNOWN);

		test_game(b, {      "b2", "f2", "b4", "f4", "c1", "e1", "c3", "e3", "d2", "e5", "d4", "e7", "c1"}, Outcome::UNKNOWN);
		test_game(b, {"d7", "b2", "f2", "b4", "f4", "c1", "e1", "c3", "e3", "d2", "e5", "d4", "e7", "c1"}, Outcome::UNKNOWN);
	}

	SECTION("Unknown_4") {
		test_game(b, {
		"a1", "a3", "a5", "a7",
		    "b2", "b4", "b6",
		"c1", "c3", "c5", "c7",
		    "d2", "d4", "d6",
		"e1", "e3", "e5", "e7",
		    "f2", "f4",
		"g1", "g3", "g5", "g7",
		}, Outcome::UNKNOWN);
	}
	
	SECTION("White Connects") {		
		test_game(b, 
		{"b2", "c1", "b4", "c3", "b6", "c5"}, 
		 Outcome::P1);
	}
	
	SECTION("Black Connects") {		
		test_game(b, 
		{"b4", "b2", "c4", "d2", "f4", "f2"}, 
		 Outcome::P2);
	}
	
	SECTION("Black Connects") {		
		test_game(b, 
		{"b4", "b2", "c4", "d2", "f4", "f2"}, 
		 Outcome::P2);
	}
}
